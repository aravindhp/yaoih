#!/bin/sh
set -eo pipefail

usage() {
      echo "Usage: $0 (-r <release> | -p <version>)  -c <location of cloud specific install-config.yaml> -d <install dir> -n <network config> [-x] <first delete the specified cluster>"
}

exit_error() {
  usage
  exit 1
}

if [ -z "$INSTALLER_BIN" ]; then
    echo "missing INSTALLER_BIN environment variable"
    exit_error
fi

delete=0
while getopts "r:p:c:d:n:x" opt; do
  case ${opt} in
    r ) # specify an OpenShift <release> from https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/
      version=https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/$OPTARG
      ;;
    p ) # specify an OpenShift <preview> from https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp-dev-preview/
      version=https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp-dev-preview/$OPTARG
      ;;
    c ) # cloud specific install-config.yaml
      if [ -d $OPTARG ]; then
        echo "-c $OPTARG cannot be a directory"
      fi
      config=$OPTARG
      ;;
    d ) # cluster installation dir
      if [ ! -d $OPTARG ]; then
        echo "-c $OPTARG cannot be a file"
      fi
      clusterdir=$OPTARG
      ;;
    n ) # cluster-network-03-config.yml or calico manifest directory
      networkconfig=$OPTARG
      ;;
    x ) # delete the cluster before creation
      delete=1
      ;;
    \? )
      usage
      exit 0
      ;;
    : )
      echo "Invalid option: ${OPTARG} requires an argument" 1>&2
      exit_error
      ;;
    * )
      echo "Invalid option: ${OPTARG}" 1>&2
      exit_error
      ;;
  esac
done

bindir=$INSTALLER_BIN

if [ -z "$release" -a -z "$version" ]; then
    if [ ! -f $bindir/openshift-install ]; then
      echo "missing openshift-install. specify -r or -d or ensure $bindir/openshift-install exists"
      error exit
    fi
fi

if [ -z "$config" ]; then
    echo "missing -c option"
    exit_error
fi

if [ -z "$clusterdir" ]; then
    echo "missing -d option"
    exit_error
fi

pushd $bindir

if [ -n "$release" -o -n "$version" ]; then
    echo "Using $version"
    curl ${version}/openshift-install-linux.tar.gz | tar -zx openshift-install
fi

installcmd="${bindir}/openshift-install --dir=${clusterdir} --log-level debug "

if [ "$delete" -eq "1" ]; then
    $installcmd destroy cluster
fi

rm -rf $clusterdir/*
cp $config $clusterdir

echo $version > $clusterdir/version

if [ "$networkconfig" ]; then
    $installcmd create manifests
    cp $networkconfig $clusterdir/manifests/cluster-network-03-config.yml
fi

$installcmd create cluster

popd
